-- Lesson Two --
The solutions to each of these can be found on the group's Github page: https://github.com/jtyurkovich/python-tutorial

(Keep in mind those are simply my solutions; they are not necessarily the only or best solutions for each problem. -jtyurkovich, 2014)

(1)  Write a function that takes a string as input and outputs the reverse of the string (e.g., input 'James is awesome' and output 'emosewa si semaJ').
(2)  Write a function that takes as input two DNA sequences of arbitrary but equal length and returns the positions of any SNPs that exist. Test with 'ACTCTATCGGCTACG' and 'ACTCTATCGACTACG' where a SNP has occurred at position 9 (zero-based indexing). Also report the SNP that occurred (i.e., which base was mutated to which base). Make sure your function can handle multiple SNPs.
(3)  Write a function that determines whether an input phrase is a pangram (a sentence that contains all the letters in the alphabet). Test it with 'The quick brown fox jumps over the lazy dog' which is a pangram. If the input is not a pangram, report which letter(s) is/are missing. 
(4)  Determine if the two strings are equal: 'AATAGATCGCTAGCT' and 'AATAGATCGCTAGCT'.
(5)  Determine if the substrings 'AATA' and 'TTT' are present in the larger string 'AATAGATCGCTAGCT'.
(6)  Now try the same problem again, but look for a substring that appears multiple times such as 'TAG'. Report the position within the string (zero-based indexing) at which the substring appears. 

-- Challenges --
Challenge 1: Reading from and writing to a text file
Open an existing text file (must be in current directory for Python to be able to find and open it) and read in the text. Download the text file ApolloandDaphne.txt from the Github page (Ovid's "Apollo and Daphne" in the original Latin from his Metamorphoses) and print the text to the screen, line by line.
Now let us edit the file. This is poetry, so let us add line numbers at the beginning of each line, then save the file as ApolloandDaphne_edited.txt.

Challenge 2: Bioinformatics applications
Now let us turn to a bioinformatics application. Read in the text file dna_sequence.txt and list:
  (1) the length of the sequence
  (2) how many bases are A
  (3) how many start codons (ATG)
  (4) how many TAA stop codons (check to make sure they are in the same reading frame as the start codon(s) found in (3))
  (5) the sequence running from the start codon to the stop codon
  (6) the amino acid sequence using this dictionary:
      aa = {'ATG':'M','CTA':'L','GTC':'V','GTG':'V','GAT':'D','CGA':'R'}
